name: Test Emulators

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-test-emulators
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    
    - name: Install dependencies (uv sync --frozen)
      run: |
        uv sync --all-extras --frozen
    
    - name: Start Docker Compose services
      run: docker compose up -d
    
    - name: Wait for services to be ready
      shell: bash
      run: |
        set -e
        echo "Waiting for emulator services..."

        wait_http() {
          local name="$1"; shift
          local url="$1"; shift
          local max=60
          echo "- Waiting for $name at $url"
          for i in $(seq 1 $max); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || true)
            if [[ "$code" =~ ^2|3 ]]; then
              echo "  $name is ready (HTTP $code)"
              return 0
            fi
            sleep 2
          done
          echo "  ERROR: $name not ready in time"
          return 1
        }

        wait_tcp() {
          local name="$1"; shift
          local host="$1"; shift
          local port="$1"; shift
          local max=60
          echo "- Waiting for $name at $host:$port"
          for i in $(seq 1 $max); do
            if (echo > /dev/tcp/$host/$port) >/dev/null 2>&1; then
              echo "  $name is ready"
              return 0
            fi
            sleep 2
          done
          echo "  ERROR: $name not ready in time"
          return 1
        }

        # HTTP-based services
        wait_http "Firebase UI" "http://localhost:4000"
        wait_http "Elasticsearch" "http://localhost:9200/_cluster/health"
        wait_http "Qdrant" "http://localhost:6333/healthz"
        wait_http "Neo4j HTTP" "http://localhost:7474"
        wait_http "A2A Inspector" "http://localhost:8081"

        # TCP-only checks
        wait_tcp "Spanner gRPC" localhost 9010
        wait_tcp "pgAdapter" localhost 5432
    
    - name: Run unit/integration tests (non-e2e)
      run: uv run pytest tests/ -v -m "not e2e"

    - name: Run e2e tests
      run: uv run pytest tests/e2e -v -m e2e
    
    - name: Show Docker logs on failure
      if: failure()
      run: docker compose logs
